name: 'Todo Management'
description: |-

  APIs for managing user todos with CRUD operations, filtering, search, and status management
endpoints:
  -
    httpMethods:
      - GET
    uri: api/todos
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Todos'
      description: 'Retrieve a paginated list of todos for the authenticated user with optional filtering and search.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      status:
        name: status
        description: 'Filter todos by status. Allowed values: completed, pending'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      search:
        name: search
        description: 'Search todos by title'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      sort_by:
        name: sort_by
        description: 'Sort todos by field. Allowed values: created_at, due_date, title. Default: created_at'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      sort_order:
        name: sort_order
        description: 'Sort order. Allowed values: asc, desc. Default: desc'
        required: false
        example: consequatur
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'Number of todos per page. Default: 15'
        required: false
        example: 17
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanQueryParameters:
      status: consequatur
      search: consequatur
      sort_by: consequatur
      sort_order: consequatur
      per_page: 17
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "data": [
             {
               "id": 1,
               "title": "Complete project documentation",
               "description": "Write comprehensive API documentation for the project",
               "is_completed": false,
               "due_date": "2025-01-20",
               "created_at": "2025-01-15T10:30:00.000000Z",
               "updated_at": "2025-01-15T10:30:00.000000Z"
             }
           ],
           "links": {
             "first": "http://localhost:8000/api/todos?page=1",
             "last": "http://localhost:8000/api/todos?page=1",
             "prev": null,
             "next": null
           },
           "meta": {
             "current_page": 1,
             "from": 1,
             "last_page": 1,
             "per_page": 15,
             "to": 1,
             "total": 1
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/todos
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Create New Todo'
      description: 'Create a new todo item for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The todo title.'
        required: true
        example: 'Complete project documentation'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The todo description.'
        required: false
        example: 'Write comprehensive API documentation for the project'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      due_date:
        name: due_date
        description: 'The due date for the todo (YYYY-MM-DD format, must be future date).'
        required: false
        example: '2025-01-20'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      title: 'Complete project documentation'
      description: 'Write comprehensive API documentation for the project'
      due_date: '2025-01-20'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "status": "success",
           "message": "Todo created successfully",
           "data": {
             "id": 1,
             "title": "Complete project documentation",
             "description": "Write comprehensive API documentation for the project",
             "is_completed": false,
             "due_date": "2025-01-20",
             "user_id": 1,
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 422
        content: |-
          {
           "status": "error",
           "message": "Validation failed",
           "errors": {
             "title": ["The title field is required."]
           }
          }
        headers: []
        description: 'validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/todos/stats
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Todo Statistics'
      description: 'Get statistics about todos for the authenticated user including total, completed, pending, and overdue counts.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "data": {
             "total_todos": 10,
             "completed_todos": 5,
             "pending_todos": 5,
             "overdue_todos": 2,
             "completion_rate": 50
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/todos/{id}'
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Get Specific Todo'
      description: 'Retrieve a specific todo by ID for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "data": {
             "id": 1,
             "title": "Complete project documentation",
             "description": "Write comprehensive API documentation for the project",
             "is_completed": false,
             "due_date": "2025-01-20",
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
           "status": "error",
           "message": "Todo not found"
          }
        headers: []
        description: 'todo not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/todos/{id}'
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Update Todo'
      description: 'Update a specific todo for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      title:
        name: title
        description: 'The todo title.'
        required: false
        example: 'Updated project documentation'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      description:
        name: description
        description: 'The todo description.'
        required: false
        example: 'Updated description for the documentation'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      is_completed:
        name: is_completed
        description: 'Whether the todo is completed.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      due_date:
        name: due_date
        description: 'The due date for the todo (YYYY-MM-DD format).'
        required: false
        example: '2025-01-25'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      title: 'Updated project documentation'
      description: 'Updated description for the documentation'
      is_completed: true
      due_date: '2025-01-25'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Todo updated successfully",
           "data": {
             "id": 1,
             "title": "Updated project documentation",
             "description": "Updated description for the documentation",
             "is_completed": true,
             "due_date": "2025-01-25",
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T11:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
           "status": "error",
           "message": "Todo not found"
          }
        headers: []
        description: 'todo not found'
        custom: []
      -
        status: 422
        content: |-
          {
           "status": "error",
           "message": "Validation failed",
           "errors": {
             "title": ["The title field is required."]
           }
          }
        headers: []
        description: 'validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/todos/{id}'
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete Todo'
      description: 'Delete a specific todo for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Todo deleted successfully"
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
           "status": "error",
           "message": "Todo not found"
          }
        headers: []
        description: 'todo not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/todos/{id}/complete'
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Mark Todo as Completed'
      description: 'Mark a specific todo as completed for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo to mark as completed.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Todo marked as completed",
           "data": {
             "id": 1,
             "title": "Complete project documentation",
             "description": "Write comprehensive API documentation for the project",
             "is_completed": true,
             "due_date": "2025-01-20",
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T11:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
           "status": "error",
           "message": "Todo not found"
          }
        headers: []
        description: 'todo not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/todos/{id}/pending'
    metadata:
      groupName: 'Todo Management'
      groupDescription: |-

        APIs for managing user todos with CRUD operations, filtering, search, and status management
      subgroup: ''
      subgroupDescription: ''
      title: 'Mark Todo as Pending'
      description: 'Mark a specific todo as pending (not completed) for the authenticated user.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the todo to mark as pending.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Todo marked as pending",
           "data": {
             "id": 1,
             "title": "Complete project documentation",
             "description": "Write comprehensive API documentation for the project",
             "is_completed": false,
             "due_date": "2025-01-20",
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T11:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
      -
        status: 404
        content: |-
          {
           "status": "error",
           "message": "Todo not found"
          }
        headers: []
        description: 'todo not found'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
