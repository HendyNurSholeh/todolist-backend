## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: |-

  APIs for user authentication and account management
endpoints:
  -
    httpMethods:
      - POST
    uri: api/auth/register
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user authentication and account management
      subgroup: ''
      subgroupDescription: ''
      title: 'User Registration'
      description: 'Register a new user account and receive an authentication token.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's full name."
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password (minimum 6 characters)."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation.'
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: password123
      password_confirmation: password123
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
           "status": "success",
           "message": "User successfully registered",
           "user": {
             "id": 1,
             "name": "John Doe",
             "email": "john@example.com",
             "email_verified_at": null,
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           },
           "authorization": {
             "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
             "type": "bearer"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 422
        content: |-
          {
           "errors": {
             "email": ["The email has already been taken."]
           }
          }
        headers: []
        description: 'validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/login
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user authentication and account management
      subgroup: ''
      subgroupDescription: ''
      title: 'User Login'
      description: 'Authenticate user with email and password to get JWT token.'
      authenticated: false
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: password123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: john@example.com
      password: password123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Login successful",
           "user": {
             "id": 1,
             "name": "John Doe",
             "email": "john@example.com",
             "email_verified_at": null,
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           },
           "authorization": {
             "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
             "type": "bearer"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "error": "Invalid credentials"
          }
        headers: []
        description: 'invalid credentials'
        custom: []
      -
        status: 422
        content: |-
          {
           "errors": {
             "email": ["The email field is required."]
           }
          }
        headers: []
        description: 'validation error'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/logout
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user authentication and account management
      subgroup: ''
      subgroupDescription: ''
      title: 'User Logout'
      description: 'Logout the authenticated user and invalidate the JWT token.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "message": "Successfully logged out"
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/auth/refresh
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user authentication and account management
      subgroup: ''
      subgroupDescription: ''
      title: 'Refresh JWT Token'
      description: 'Refresh the JWT token to extend session time.'
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "user": {
             "id": 1,
             "name": "John Doe",
             "email": "john@example.com",
             "email_verified_at": null,
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           },
           "authorization": {
             "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
             "type": "bearer"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/me
    metadata:
      groupName: Authentication
      groupDescription: |-

        APIs for user authentication and account management
      subgroup: ''
      subgroupDescription: ''
      title: 'Get User Profile'
      description: "Get the authenticated user's profile information."
      authenticated: true
      deprecated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "status": "success",
           "user": {
             "id": 1,
             "name": "John Doe",
             "email": "john@example.com",
             "email_verified_at": null,
             "created_at": "2025-01-15T10:30:00.000000Z",
             "updated_at": "2025-01-15T10:30:00.000000Z"
           }
          }
        headers: []
        description: success
        custom: []
      -
        status: 401
        content: |-
          {
           "message": "Unauthenticated."
          }
        headers: []
        description: unauthenticated
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
